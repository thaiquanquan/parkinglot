/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package parkinglot.gui;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import parkinglot.core.ParkingLot;
import parkinglot.core.Vehicle;
import parkinglot.transaction.Transaction;

/**
 *
 * @author Maxsys
 */
public class UserScreen extends javax.swing.JFrame {
   private ParkingLot parkingLot;
    private ArrayList<Transaction> transactions;
    private AdminScreen adminScreen; // Tham chiếu đến AdminScreen

    /**
     * Creates new form UserScreen
     */
    
    public UserScreen(ParkingLot parkingLot, ArrayList<Transaction> transactions, AdminScreen adminScreen) {
        this.parkingLot = parkingLot;
        this.transactions = transactions;
        this.adminScreen = adminScreen; // Liên kết với AdminScreen
        initComponents();
        this.setVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCheckAvailability = new javax.swing.JButton();
        btnReserveSpot = new javax.swing.JButton();
        btnViewReservationHistory = new javax.swing.JButton();
        btnCancelReservation = new javax.swing.JButton();
        btnCalculateCharges = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnCheckAvailability.setText("Check Availability");
        btnCheckAvailability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckAvailabilityActionPerformed(evt);
            }
        });

        btnReserveSpot.setText("Reserve Spot");
        btnReserveSpot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReserveSpotActionPerformed(evt);
            }
        });

        btnViewReservationHistory.setText("View Reservation History");
        btnViewReservationHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewReservationHistoryActionPerformed(evt);
            }
        });

        btnCancelReservation.setText("Cancel Reservation");
        btnCancelReservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelReservationActionPerformed(evt);
            }
        });

        btnCalculateCharges.setText("Calculate Charges");
        btnCalculateCharges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateChargesActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnCalculateCharges, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                    .addComponent(btnCheckAvailability, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnReserveSpot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnViewReservationHistory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCancelReservation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnViewReservationHistory, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(btnCheckAvailability, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnReserveSpot, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(btnCancelReservation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnCalculateCharges, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCheckAvailabilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckAvailabilityActionPerformed
        int availableSpots = parkingLot.getAvailableSpacesCount();
        JOptionPane.showMessageDialog(this, "Number of available parking spots: " + availableSpots);
    }//GEN-LAST:event_btnCheckAvailabilityActionPerformed

    private void btnReserveSpotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReserveSpotActionPerformed
      String input = JOptionPane.showInputDialog(this, "Enter Parking Spot ID to reserve (1-10):");
        if (input != null) {
            try {
                int spaceId = Integer.parseInt(input);
                if (parkingLot.getParkingSpace(spaceId) != null && parkingLot.getParkingSpace(spaceId).isAvailable()) {
                    String ownerName = JOptionPane.showInputDialog(this, "Enter Owner Name:");
                    String licensePlate = JOptionPane.showInputDialog(this, "Enter License Plate:");
                    String vehicleType = JOptionPane.showInputDialog(this, "Enter Vehicle Type:");

                    if (ownerName != null && licensePlate != null && vehicleType != null) {
                        Vehicle vehicle = new Vehicle(licensePlate, ownerName, vehicleType);
                        if (parkingLot.reserveSpace(spaceId, vehicle)) {
                            JOptionPane.showMessageDialog(this, "Parking spot " + spaceId + " reserved successfully for vehicle: " + vehicle);
                            Transaction transaction = new Transaction("T" + (transactions.size() + 1), ownerName, licensePlate, "Reserve", 0.0, new Date());
                            transactions.add(transaction);

                            // Gửi thông báo đến AdminScreen
                            adminScreen.updateParkingStatus(licensePlate, "reserved");
                        } else {
                            JOptionPane.showMessageDialog(this, "Parking spot " + spaceId + " is already reserved.");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Reservation cancelled.");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Parking spot " + spaceId + " is not available or does not exist.");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid input. Please enter a valid number.");
            }
        }
    }//GEN-LAST:event_btnReserveSpotActionPerformed

    private void btnViewReservationHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewReservationHistoryActionPerformed
       if (transactions.isEmpty()) {
        JOptionPane.showMessageDialog(this, "No transactions available to view.", "Transaction History", JOptionPane.INFORMATION_MESSAGE);
    } else {
        StringBuilder history = new StringBuilder("Transaction History:\n");
        for (Transaction transaction : transactions) {
            history.append(transaction.toString()).append("\n");
        }
        JOptionPane.showMessageDialog(this, history.toString(), "Transaction History", JOptionPane.INFORMATION_MESSAGE);
    }
    }//GEN-LAST:event_btnViewReservationHistoryActionPerformed

    private void btnCancelReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelReservationActionPerformed
      String vehicleNumber = JOptionPane.showInputDialog(this, "Enter Vehicle Number to Cancel Reservation:");
    if (vehicleNumber != null && !vehicleNumber.trim().isEmpty()) {
        // Chuẩn hóa biển số xe để tránh lỗi do khác biệt chữ hoa/chữ thường và khoảng trắng
        vehicleNumber = vehicleNumber.trim().toUpperCase();

        if (parkingLot.cancelReservation(vehicleNumber)) {
            JOptionPane.showMessageDialog(this, "Reservation for vehicle " + vehicleNumber + " has been canceled.");

            // Gửi thông báo đến AdminScreen
            adminScreen.updateParkingStatus(vehicleNumber, "released");
        } else {
            JOptionPane.showMessageDialog(this, "No reservation found for vehicle " + vehicleNumber);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Vehicle number cannot be empty.");
    }
    }//GEN-LAST:event_btnCancelReservationActionPerformed

    private void btnCalculateChargesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateChargesActionPerformed
         JOptionPane.showMessageDialog(this, "Calculating charges...");
    }//GEN-LAST:event_btnCalculateChargesActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        System.exit(0); // Thoát ứng dụng
    }//GEN-LAST:event_btnExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        ParkingLot sharedParkingLot = new ParkingLot(50);
    ArrayList<Transaction> sharedTransactions = new ArrayList<>();
    AdminScreen adminScreen = new AdminScreen(sharedParkingLot, sharedTransactions);
    
    // Truyền các đối tượng dùng chung khi khởi tạo UserScreen
    UserScreen userScreen = new UserScreen(sharedParkingLot, sharedTransactions, adminScreen);
    
    // Hiển thị màn hình người dùng
    userScreen.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalculateCharges;
    private javax.swing.JButton btnCancelReservation;
    private javax.swing.JButton btnCheckAvailability;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnReserveSpot;
    private javax.swing.JButton btnViewReservationHistory;
    // End of variables declaration//GEN-END:variables
}
